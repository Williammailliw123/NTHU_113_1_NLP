# -*- coding: utf-8 -*-
"""NLP_Assignment1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/102FZhPwGFd5B83z-p8K5oxGMykD37H8Y

## Part I: Data Pre-processing
"""

import pandas as pd

# Download the Google Analogy dataset
!wget http://download.tensorflow.org/data/questions-words.txt

# Preprocess the dataset
file_name = "questions-words"
with open(f"{file_name}.txt", "r") as f:
    data = f.read().splitlines()

# check data from the first 10 entries
for entry in data[:10]:
    print(entry)

from google.colab import drive
drive.mount('/content/drive')

# TODO1: Write your code here for processing data to pd.DataFrame
# Please note that the first five mentions of ": " indicate `semantic`,
# and the remaining nine belong to the `syntatic` category.

questions = []
categories = []
sub_categories = []

cnt=0
cur_sub=""
for entry in data:
    if entry.startswith(':'):
        cnt+=1
        cur_sub=entry
    else:
        questions.append(entry)
        sub_categories.append(cur_sub)
        if cnt <= 5:
            categories.append("Semantic")
        else:
            categories.append("Syntactic")

# Create the dataframe
df = pd.DataFrame(
    {
        "Question": questions,
        "Category": categories,
        "SubCategory": sub_categories,
    }
)

df.head()

df.to_csv(f"{file_name}.csv", index=False)

"""## Part II: Use pre-trained word embeddings
- After finish Part I, you can run Part II code blocks only.
"""

import pandas as pd
import numpy as np
import gensim.downloader
from tqdm import tqdm
import matplotlib.pyplot as plt
from sklearn.manifold import TSNE

data = pd.read_csv("questions-words.csv")

MODEL_NAME = "glove-wiki-gigaword-200"
# You can try other models.
# https://radimrehurek.com/gensim/models/word2vec.html#pretrained-models

# Load the pre-trained model (using GloVe vectors here)
model = gensim.downloader.load(MODEL_NAME)
print("The Gensim model loaded successfully!")

# Do predictions and preserve the gold answers (word_D)
preds = []
golds = []

for analogy in tqdm(data["Question"]):
      # TODO2: Write your code here to use pre-trained word embeddings for getting predictions of the analogy task.
      # You should also preserve the gold answers during iterations for evaluations later.
      """ Hints
      # Unpack the analogy (e.g., "man", "woman", "king", "queen")
      # Perform vector arithmetic: word_b + word_c - word_a should be close to word_d
      # Source: https://github.com/piskvorky/gensim/blob/develop/gensim/models/keyedvectors.py#L776
      # Mikolov et al., 2013: big - biggest and small - smallest
      # Mikolov et al., 2013: X = vector(”biggest”) − vector(”big”) + vector(”small”).
      """
      words = analogy.split()
      a = words[0].lower()
      b = words[1].lower()
      c = words[2].lower()
      d = words[3].lower()
      golds.append(d)
      if a in model and b in model and c in model:
            result_vector = model[b] - model[a] + model[c]
            similar_word = model.similar_by_vector(result_vector, topn=1)
            preds.append(similar_word[0][0])
      else:
            preds.append("UNKNOWN")
print(preds[:5])

# Perform evaluations. You do not need to modify this block!!

def calculate_accuracy(gold: np.ndarray, pred: np.ndarray) -> float:
    return np.mean(gold == pred)

golds_np, preds_np = np.array(golds), np.array(preds)
data = pd.read_csv("questions-words.csv")

# Evaluation: categories
for category in data["Category"].unique():
    mask = data["Category"] == category
    golds_cat, preds_cat = golds_np[mask], preds_np[mask]
    acc_cat = calculate_accuracy(golds_cat, preds_cat)
    print(f"Category: {category}, Accuracy: {acc_cat * 100}%")

# Evaluation: sub-categories
for sub_category in data["SubCategory"].unique():
    mask = data["SubCategory"] == sub_category
    golds_subcat, preds_subcat = golds_np[mask], preds_np[mask]
    acc_subcat = calculate_accuracy(golds_subcat, preds_subcat)
    print(f"Sub-Category{sub_category}, Accuracy: {acc_subcat * 100}%")

# Collect words from Google Analogy dataset
SUB_CATEGORY = ": family"

# TODO3: Plot t-SNE for the words in the SUB_CATEGORY `: family`
#Part of it is generated by chatgpt and then modified.
family_data = data[data["SubCategory"] == SUB_CATEGORY]
family_question = family_data["Question"]
words = [item for sublist in family_question for item in sublist.split()]
unique_words = list(set(words))
valid_words = [word for word in unique_words if word in model]
word_vectors = np.array([model[word] for word in valid_words])

tsne = TSNE(n_components=2, random_state=0)
word_vectors_2d = tsne.fit_transform(word_vectors)

plt.figure(figsize=(12,8))
plt.scatter(word_vectors_2d[:, 0], word_vectors_2d[:, 1], marker='o')
for i, word in enumerate(valid_words):
    plt.annotate(word, (word_vectors_2d[i, 0], word_vectors_2d[i, 1]), fontsize=8)

plt.title("Word Relationships from Google Analogy Task")
plt.savefig("word_relationships.png", bbox_inches="tight")
plt.show()

"""### Part III: Train your own word embeddings

### Get the latest English Wikipedia articles and do sampling.
- Usually, we start from Wikipedia dump (https://dumps.wikimedia.org/enwiki/latest/enwiki-latest-pages-articles.xml.bz2). However, the downloading step will take very long. Also, the cleaning step for the Wikipedia corpus ([`gensim.corpora.wikicorpus.WikiCorpus`](https://radimrehurek.com/gensim/corpora/wikicorpus.html#gensim.corpora.wikicorpus.WikiCorpus)) will take much time. Therefore, we provide cleaned files for you.
"""

# Download the split Wikipedia files
# Each file contain 562365 lines (articles).
!gdown --id 1jiu9E1NalT2Y8EIuWNa1xf2Tw1f1XuGd -O wiki_texts_part_0.txt.gz
!gdown --id 1ABblLRd9HXdXvaNv8H9fFq984bhnowoG -O wiki_texts_part_1.txt.gz
!gdown --id 1z2VFNhpPvCejTP5zyejzKj5YjI_Bn42M -O wiki_texts_part_2.txt.gz
!gdown --id 1VKjded9BxADRhIoCzXy_W8uzVOTWIf0g -O wiki_texts_part_3.txt.gz
!gdown --id 16mBeG26m9LzHXdPe8UrijUIc6sHxhknz -O wiki_texts_part_4.txt.gz

# Download the split Wikipedia files
# Each file contain 562365 lines (articles), except the last file.
!gdown --id 17JFvxOH-kc-VmvGkhG7p3iSZSpsWdgJI -O wiki_texts_part_5.txt.gz
!gdown --id 19IvB2vOJRGlrYulnTXlZECR8zT5v550P -O wiki_texts_part_6.txt.gz
!gdown --id 1sjwO8A2SDOKruv6-8NEq7pEIuQ50ygVV -O wiki_texts_part_7.txt.gz
!gdown --id 1s7xKWJmyk98Jbq6Fi1scrHy7fr_ellUX -O wiki_texts_part_8.txt.gz
!gdown --id 17eQXcrvY1cfpKelLbP2BhQKrljnFNykr -O wiki_texts_part_9.txt.gz
!gdown --id 1J5TAN6bNBiSgTIYiPwzmABvGhAF58h62 -O wiki_texts_part_10.txt.gz

# Extract the downloaded wiki_texts_parts files.
!gunzip -k wiki_texts_part_*.gz

# Combine the extracted wiki_texts_parts files.
!cat wiki_texts_part_*.txt > wiki_texts_combined.txt

# Check the first ten lines of the combined file
!head -n 10 wiki_texts_combined.txt

"""Please note that we used the default parameters of [`gensim.corpora.wikicorpus.WikiCorpus`](https://radimrehurek.com/gensim/corpora/wikicorpus.html#gensim.corpora.wikicorpus.WikiCorpus) for cleaning the Wiki raw file. Thus, words with one character were discarded."""

# Now you need to do sampling because the corpus is too big.
# You can further perform analysis with a greater sampling ratio.

import random

wiki_txt_path = "wiki_texts_combined.txt"
# wiki_texts_combined.txt is a text file separated by linebreaks (\n).
# Each row in wiki_texts_combined.txt indicates a Wikipedia article.
output_path = "wiki_texts_sample.txt"
with open(wiki_txt_path, "r", encoding="utf-8") as f:
    with open(output_path, "w", encoding="utf-8") as output_file:
    # TODO4: Sample `20%` Wikipedia articles
    # Write your code here
      lines = f.readlines()
      sample_ratio = 0.2
      num_lines = len(lines)
      num_sampled_lines = int(num_lines * sample_ratio)
      sampled_lines = random.sample(lines, num_sampled_lines)
      output_file.writelines(sampled_lines)
      del lines, sampled_lines

!unzip wiki_texts_sample.zip

# Check the first ten lines of the sample file
!head -n 10 wiki_texts_sample.txt

# TODO5: Train your own word embeddings with the sampled articles
# https://radimrehurek.com/gensim/models/word2vec.html#gensim.models.word2vec.Word2Vec
# Hint: You should perform some pre-processing before training.
#Most of them are generated by chatgpt, and then some code and related parameters are adjusted.
import gensim
from gensim.models import Word2Vec
import re
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
import multiprocessing

# Download NLTK resources
nltk.download('stopwords')
nltk.download('punkt')

train_data_path = "wiki_texts_sample.txt"
stop_words = set(stopwords.words('english'))

num_cores = multiprocessing.cpu_count()
print(f"Num of cores: {num_cores}")
sentences = []

with open(train_data_path, "r", encoding="utf-8") as corpus:
    for i, sentence in enumerate(corpus):
        # Better word segmentation method
        processed_sentence = word_tokenize(sentence)
        # Remove words with non-English letters and convert to lowercase
        processed_sentence = [word.lower() for word in processed_sentence if re.match("^[a-zA-Z]+$", word)]
        # Remove stop words
        processed_sentence = [word for word in processed_sentence if word not in stop_words]
        # Add processed sentences to list
        sentences.append(processed_sentence)

from gensim.models import Word2Vec
import gensim
import multiprocessing

class EpochLogger(gensim.models.callbacks.CallbackAny2Vec):
    def __init__(self):
        self.epoch = 0

    def on_epoch_begin(self, model):
        print(f"Epoch {self.epoch} start")

    def on_epoch_end(self, model):
        print(f"Epoch {self.epoch} end")
        self.epoch += 1

epoch_logger = EpochLogger()

# Assuming 'sentences' and 'num_cores' are already defined
model = Word2Vec(
    sentences,
    vector_size=50,  # Size of word vectors
    window=5,         # Context window size
    min_count=8,      # Ignores words with frequency lower than this
    sg=0,             # 0 for CBOW, 1 for Skip-gram
    workers=num_cores, # Number of CPU cores to use
    callbacks=[epoch_logger]  # Include the epoch logger for tracking progress
)

model.save("word2vec.model")
print("Model saved successfully!")

data = pd.read_csv("questions-words.csv")

# Do predictions and preserve the gold answers (word_D)
preds = []
golds = []

model = Word2Vec.load("word2vec.model")
for analogy in tqdm(data["Question"]):
      # TODO6: Write your code here to use your trained word embeddings for getting predictions of the analogy task.
      # You should also preserve the gold answers during iterations for evaluations later.
      """ Hints
      # Unpack the analogy (e.g., "man", "woman", "king", "queen")
      # Perform vector arithmetic: word_b + word_c - word_a should be close to word_d
      # Source: https://github.com/piskvorky/gensim/blob/develop/gensim/models/keyedvectors.py#L776
      # Mikolov et al., 2013: big - biggest and small - smallest
      # Mikolov et al., 2013: X = vector(”biggest”) − vector(”big”) + vector(”small”).
      """
      words = analogy.split()
      a = words[0].lower()
      b = words[1].lower()
      c = words[2].lower()
      d = words[3].lower()
      golds.append(d)
      if a in model.wv and b in model.wv and c in model.wv:
            result_vector = model.wv[b] - model.wv[a] + model.wv[c]
            similar_word = model.wv.similar_by_vector(result_vector, topn=1)
            preds.append(similar_word[0][0])
      else:
            preds.append("UNKNOWN")
print(preds[:5])

def calculate_accuracy(gold: np.ndarray, pred: np.ndarray) -> float:
    return np.mean(gold == pred)

golds_np, preds_np = np.array(golds), np.array(preds)
data = pd.read_csv("questions-words.csv")

# Evaluation: categories
for category in data["Category"].unique():
    mask = data["Category"] == category
    golds_cat, preds_cat = golds_np[mask], preds_np[mask]
    acc_cat = calculate_accuracy(golds_cat, preds_cat)
    print(f"Category: {category}, Accuracy: {acc_cat * 100}%")

# Evaluation: sub-categories
for sub_category in data["SubCategory"].unique():
    mask = data["SubCategory"] == sub_category
    golds_subcat, preds_subcat = golds_np[mask], preds_np[mask]
    acc_subcat = calculate_accuracy(golds_subcat, preds_subcat)
    print(f"Sub-Category{sub_category}, Accuracy: {acc_subcat * 100}%")

# Collect words from Google Analogy dataset
SUB_CATEGORY = ": family"

# TODO7: Plot t-SNE for the words in the SUB_CATEGORY `: family`
#Part of it is generated by chatgpt and then modified.

family_data = data[data["SubCategory"] == SUB_CATEGORY]
family_question = family_data["Question"]
words = [item for sublist in family_question for item in sublist.split()]
unique_words = list(set(words))
valid_words = [word for word in unique_words if word in model.wv]
word_vectors = np.array([model.wv[word] for word in valid_words])

tsne = TSNE(n_components=2, random_state=0)
word_vectors_2d = tsne.fit_transform(word_vectors)

plt.figure(figsize=(12,8))
plt.scatter(word_vectors_2d[:, 0], word_vectors_2d[:, 1], marker='o')
for i, word in enumerate(valid_words):
    plt.annotate(word, (word_vectors_2d[i, 0], word_vectors_2d[i, 1]), fontsize=8)

plt.title("Word Relationships from Google Analogy Task")
plt.savefig("selftrained_word_relationships.png", bbox_inches="tight")
plt.show()